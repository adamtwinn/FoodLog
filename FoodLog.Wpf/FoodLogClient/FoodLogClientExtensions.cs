// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using FoodLog.DTOs;

namespace FoodLog.Wpf.FoodLogClient
{
    /// <summary>
    /// Extension methods for FoodLogClient.
    /// </summary>
    public static partial class FoodLogClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<EntryDTO> GetEntries(this IFoodLogClient operations)
            {
                return Task.Factory.StartNew(s => ((IFoodLogClient)s).GetEntriesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EntryDTO>> GetEntriesAsync(this IFoodLogClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// </param>
            public static EntryDTO PostEntry(this IFoodLogClient operations, EntryDTO dto = default(EntryDTO))
            {
                return Task.Factory.StartNew(s => ((IFoodLogClient)s).PostEntryAsync(dto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='dto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntryDTO> PostEntryAsync(this IFoodLogClient operations, EntryDTO dto = default(EntryDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostEntryWithHttpMessagesAsync(dto, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static EntryDTO GetEntry(this IFoodLogClient operations, int id)
            {
                return Task.Factory.StartNew(s => ((IFoodLogClient)s).GetEntryAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EntryDTO> GetEntryAsync(this IFoodLogClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dto'>
            /// </param>
            public static void PutEntry(this IFoodLogClient operations, int id, EntryDTO dto = default(EntryDTO))
            {
                Task.Factory.StartNew(s => ((IFoodLogClient)s).PutEntryAsync(id, dto), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='dto'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutEntryAsync(this IFoodLogClient operations, int id, EntryDTO dto = default(EntryDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutEntryWithHttpMessagesAsync(id, dto, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void DeleteEntry(this IFoodLogClient operations, int id)
            {
                Task.Factory.StartNew(s => ((IFoodLogClient)s).DeleteEntryAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteEntryAsync(this IFoodLogClient operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteEntryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
